{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","text","current","value","quoteId","commentData","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","path","exact","to","url","component"],"mappings":"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","file":"static/js/4.8b9a5b63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__23vrE\",\"error\":\"Comments_error__1ZP1i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2tPHl\",\"loading\":\"NewCommentForm_loading__peR1-\",\"control\":\"NewCommentForm_control__2xD96\",\"actions\":\"NewCommentForm_actions__Xuuv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1hIqB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3TkvH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2K7yf\"};","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = props => {\n\tconst commentTextRef = useRef();\n\tconst { sendRequest, status, error } = useHttp(addComment);\n\n\tconst { onAddedComment } = props;\n\tuseEffect(() => {\n\t\tif (status === 'completed' && !error) {\n\t\t\tonAddedComment();\n\t\t}\n\t}, [status, error, onAddedComment]);\n\n\tconst submitFormHandler = event => {\n\t\tevent.preventDefault();\n\t\tconst text = commentTextRef.current.value;\n\t\tsendRequest({ quoteId: props.quoteId, commentData: text });\n\n\t\t// optional: Could validate here\n\n\t\t// send comment to server\n\t};\n\n\treturn (\n\t\t<form className={classes.form} onSubmit={submitFormHandler}>\n\t\t\t{status === 'peding' && (\n\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className={classes.control} onSubmit={submitFormHandler}>\n\t\t\t\t<label htmlFor=\"comment\">Your Comment</label>\n\t\t\t\t<textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n\t\t\t</div>\n\t\t\t<div className={classes.actions}>\n\t\t\t\t<button className=\"btn\">Add Comment</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = props => {\n\treturn (\n\t\t<ul className={classes.comments}>\n\t\t\t{props.comments.map(comment => (\n\t\t\t\t<CommentItem key={comment.id} text={comment.text} />\n\t\t\t))}\n\t\t</ul>\n\t);\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from '../comments/CommentsList';\n\nconst Comments = () => {\n\tconst [isAddingComment, setIsAddingComment] = useState(false);\n\n\tconst params = useParams();\n\tconst { quoteId } = params;\n\n\tconst {\n\t\tsendRequest,\n\t\tstatus,\n\t\tdata: loadedComments,\n\t\terror,\n\t} = useHttp(getAllComments);\n\n\tuseEffect(() => {\n\t\tsendRequest(quoteId);\n\t}, [quoteId, sendRequest]);\n\n\tconst addedCommentHandler = useCallback(() => {\n\t\tsendRequest(quoteId);\n\t}, [sendRequest, quoteId]);\n\n\tconst startAddCommentHandler = () => {\n\t\tsetIsAddingComment(true);\n\t};\n\n\tlet comments;\n\tif (status === 'pending') {\n\t\tcomments = (\n\t\t\t<div className=\"centered\">\n\t\t\t\t<LoadingSpinner />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif (status === 'completed') {\n\t\tcomments = (\n\t\t\t<div className=\"centered\">\n\t\t\t\t<CommentsList comments={loadedComments} />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif (\n\t\tstatus === 'completed' &&\n\t\t(!loadedComments || loadedComments.length === 0)\n\t) {\n\t\tcomments = (\n\t\t\t<div className=\"centered focused\">\n\t\t\t\t<p className={classes.error}>No comments yet.</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif (error) {\n\t\tcomments = (\n\t\t\t<div className=\"centered\">\n\t\t\t\t<p className={classes.error}>{error}</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<section className={classes.comments}>\n\t\t\t<h2>User Comments</h2>\n\t\t\t{!isAddingComment && (\n\t\t\t\t<button className=\"btn\" onClick={startAddCommentHandler}>\n\t\t\t\t\tAdd a Comment\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{isAddingComment && (\n\t\t\t\t<NewCommentForm\n\t\t\t\t\tquoteId={params.quoteId}\n\t\t\t\t\tonAddedComment={addedCommentHandler}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{comments}\n\t\t</section>\n\t);\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from 'react';\r\nimport { Route, useParams, Link, useRouteMatch } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nconst QuoteDetail = () => {\r\n\tconst match = useRouteMatch();\r\n\tconst params = useParams();\r\n\tconst { quoteId } = params;\r\n\r\n\tconst {\r\n\t\tsendRequest,\r\n\t\tstatus,\r\n\t\tdata: quote,\r\n\t\terror,\r\n\t} = useHttp(getSingleQuote, true);\r\n\r\n\tuseEffect(() => {\r\n\t\tsendRequest(quoteId);\r\n\t}, [sendRequest, quoteId]);\r\n\r\n\tif (status === 'pending') {\r\n\t\treturn <LoadingSpinner />;\r\n\t}\r\n\r\n\tif (error) {\r\n\t\treturn <p className=\"centered focused\">{error}</p>;\r\n\t}\r\n\r\n\tif (!quote) {\r\n\t\treturn <p>No quote found</p>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<HighlightedQuote text={quote.text} author={quote.author} />\r\n\t\t\t<Route path={`${match.path}`} exact>\r\n\t\t\t\t<div className=\"centered\">\r\n\t\t\t\t\t<Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n\t\t\t\t\t\tLoad comments\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</Route>\r\n\r\n\t\t\t<Route path={`${match.path}/comments`} component={Comments} />\r\n\t\t</Fragment>\r\n\t);\r\n};\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}